"use strict";var timeEl,calledTime,showTimes;// debounce function to prevent crashing events.
function debounce(g,a,b){var c;return function(){var d=this,e=arguments;clearTimeout(c),c=setTimeout(function(){c=null,b||g.apply(d,e)},a),b&&!c&&g.apply(d,e)}}function time(){timeEl=document.querySelector("[data-time]"),calledTime=timeEl.dataset.time;var a=document.querySelector("#time"),b=new Date;//  will call this function when you click recalculate, refresh the page or change the input value.
if("wake"==calledTime){var c=function(){showTimes.innerHTML="",time()},d=timeEl.value.split(":"),e=new Date;if(e.setHours(parseInt(d[0])),e.setMinutes(parseInt(d[1])),b.getHours()>e.getHours()){// if the current hour is bigger than set time, go to another day.
// And if that day is bigger than the last day of month, set the day to 1 and go to next month.
var f=new Date(b.getYear(),b.getMonth()+1,0).getDay();e.setDate(b.getDate()+1),e.getDay()>f&&(e.setDate(1),e.setMonth(b.getMonth()+1))}//convert the wake date to miliseconds and psuh that variable down to calculation function.
var g=e.getTime();calcTime(g),a.addEventListener("change",debounce(c,20))}else{// call this on sleep-now page
var h="".concat(10>b.getHours()?"0":"").concat(b.getHours(),":").concat(10>b.getMinutes()?"0":"").concat(b.getMinutes());timeEl.innerHTML=h,calcTime(b.getTime())}}function calcTime(a){// convert 90 and 15 minutes to miliseconds for calculation.
for(var b,c=5400000,d=900000,e="sleep"===calledTime?a+d+c:a-d-c,f=[e],g=0;5>g;g++)// again wheter we should add or substract.
// push the hour in times array for later use
// convert the miliseconds to hour and secs.
b="sleep"===calledTime?a+d+c+(f[g]-a-d):a-d-c+(f[g]-a+d),f.push(b),f[g]=[new Date(f[g]).getHours(),new Date(f[g]).getMinutes()];// convert the last firstHour to hour and secs.
// if the times are decreasing, they will be on wrong order for display, we'll fix it.
f[5]=[new Date(f[5]).getHours(),new Date(f[5]).getMinutes()],"wake"===calledTime?f.reverse():f,displayTime(f)}function displayTime(a){// Map over the times array and spit out hours and minutes into the time grid.
showTimes=document.querySelector(".sleep-now__times"),a.map(function(a){return showTimes.innerHTML+="<li>".concat(10>a[0]?"0":"").concat(a[0],":").concat(10>a[1]?"0":"").concat(a[1],"</li>")})}var hero=document.querySelector(".hero");function getPage(a){// the function to fetch the route html.
var b=document.querySelector(".route"),c=b.querySelector(".inner-html"),d=b.querySelector(".route__bg");fetch(a).then(function(a){return a.text()}).then(function(a){c.innerHTML=a}).then(function(){b.classList.remove("reverse")&&b.classList.remove("reverse"),b.style.display="block",b.classList.add("active"),"sleep-now.html"==a?d.classList.add("sleep-now__bg"):d.classList.add("sleep-at__bg")}).then(function(){return time()})// make the calculations and put them in the html.)
.then(function(){hero.style.opacity="0";// add new buttons into a node-list
var a=b.querySelectorAll("[data-recalculate], [data-fetch]");a.forEach(function(a){return a.addEventListener("click",function(){showTimes.innerHTML="",a.hasAttribute("data-recalculate")?time():cleanState(a)})})})}var buttons=document.querySelectorAll("button");buttons.forEach(function(a){return a.addEventListener("click",function(){return getPage(a.dataset.fetch)})});function cleanState(a){function b(){return e.classList.remove("sleep-now__bg"),e.classList.remove("sleep-at__bg"),c.classList.remove("active"),c.classList.remove("reverse"),c.style.display="none",e.removeEventListener("animationend",b,!1),void 0===a?void(hero.style.opacity="1"):void getPage(a.dataset.fetch)}var c=document.querySelector(".route"),d=c.querySelector(".inner-html"),e=c.querySelector(".route__bg");c.classList.add("reverse"),d.innerHTML="",e.addEventListener("animationend",b)}